# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
# 
# Copyright (C) 2004-2014 David Anderson
# 
# This file is part of SourcePawn.
# 
# SourcePawn is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
# 
# SourcePawn is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# SourcePawn. If not, see http://www.gnu.org/licenses/.
#
import os

SP.libspcomp = {}
for arch in Root.archs:
  ### CLI
  binary = Root.StaticLibrary(builder, 'spcomp', arch)
  binary.compiler.cxxincludes += [
    os.path.join(builder.sourcePath, 'include'),
    os.path.join(builder.sourcePath, builder.sourceFolder),
  ]

  if binary.compiler.like('gcc'):
    binary.compiler.cflags += [
      '-Wno-error=switch',
      '-Wno-invalid-offsetof',
    ]
    binary.compiler.cxxflags += ['-fno-rtti']
  if binary.compiler.like('clang'):
    binary.compiler.cxxflags += [
      '-Wno-implicit-exception-spec-mismatch',
      '-Wno-error=unused-private-field',
      '-Wno-unused-const-variable',
    ]

  binary.sources += [
    'compile-context.cpp',
    'constant-evaluator.cpp',
    'dll_exports.cpp',
    'float-value.cpp',
    'int-value.cpp',
    'pool-allocator.cpp',
    'scopes.cpp',
    'smx-builder.cpp',
    'source-manager.cpp',
    'symbols.cpp',
    'reporting.cpp',
    'type-manager.cpp',
    'types.cpp',
    'parser/ast-printer.cpp',
    'parser/json-tools.cpp',
    'parser/keyword-table.cpp',
    'parser/lexer.cpp',
    'parser/macro-lexer.cpp',
    'parser/parser.cpp',
    'parser/preprocessor.cpp',
    'parser/tk-evaluator.cpp',
    'sema/conversion.cpp',
    'sema/name-resolver.cpp',
    'sema/semantic-analysis.cpp',
    'sema/type-resolver.cpp',
  ]
  SP.libspcomp[arch] = builder.Add(binary)

  binary = Root.Program(builder, 'spcomp', arch)
  binary.compiler.cxxincludes += [
    os.path.join(builder.sourcePath),
    os.path.join(builder.sourcePath, 'include'),
    os.path.join(builder.sourcePath, builder.sourceFolder),
  ]
  if binary.compiler.like('msvc'):
    binary.compiler.postlink += ['/SUBSYSTEM:CONSOLE']

  binary.sources += [
    'main.cpp',
  ]
  binary.compiler.linkflags += [
    SP.libspcomp[arch].binary
  ]
  builder.Add(binary)


