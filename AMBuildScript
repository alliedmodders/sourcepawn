# vim: set ts=2 sw=2 tw=99 et ft=python:
# 
# Copyright (C) 2004-2012 David Anderson
# 
# This file is part of SourcePawn.
# 
# SourcePawn is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
# 
# SourcePawn is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# SourcePawn. If not, see http://www.gnu.org/licenses/.
#
import os
import sys

def Normalize(path):
  return os.path.abspath(os.path.normpath(path))

class Config(object):
  def __init__(self):
    super(Config, self).__init__()
    self.arch = builder.target.arch

  def configure(self):
    cxx = builder.DetectCxx()

    if cxx.like('gcc'):
      cxx.cflags += [
        '-pipe',
        '-Wall',
        '-Werror',
        '-Wno-switch',
      ]
      if builder.target.arch == 'x86':
        cxx.cflags += ['-msse']
      else:
        cxx.cflags += ['-fPIC']

      cxx.cxxflags += ['-std=c++11']

      have_gcc = cxx.family is 'gcc'
      have_clang = cxx.family is 'clang' or cxx.family is 'emscripten'
      if have_clang or have_gcc:
        cxx.cflags += ['-fvisibility=hidden']
        cxx.cxxflags += ['-fvisibility-inlines-hidden']
        if have_clang or (have_gcc and cxx.version >= '4.7'):
          cxx.cxxflags += ['-Wno-delete-non-virtual-dtor']

      # Disable some stuff we don't use, that gives us better binary
      # compatibility on Linux.
      cxx.cxxflags += [
        '-fno-exceptions',
        '-fno-rtti',
        '-fno-threadsafe-statics',
        '-Wno-non-virtual-dtor',
        '-Wno-overloaded-virtual',
      ]

      if have_gcc:
        cxx.cflags += ['-mfpmath=sse']

      cxx.postlink += ['-lm']

      if cxx.like('emscripten'):
        emflags = ['-s', 'PRECISE_F32=1']
        cxx.cflags += emflags
        cxx.linkflags += emflags
    elif cxx.like('msvc'):
      if builder.options.debug == '1':
        cxx.cflags += ['/MTd']
        cxx.linkflags += ['/NODEFAULTLIB:libcmt']
      else:
        cxx.cflags += ['/MT']
      cxx.defines += [
        '_CRT_SECURE_NO_DEPRECATE',
        '_CRT_SECURE_NO_WARNINGS',
        '_CRT_NONSTDC_NO_DEPRECATE',
        '_ITERATOR_DEBUG_LEVEL=0',
      ]
      cxx.cflags += [
        '/W3',
        '/wd4351',
      ]
      cxx.cxxflags += [
        '/EHsc',
        '/GR-',
        '/TP',
      ]
      cxx.linkflags += [
        '/MACHINE:X86',
        'kernel32.lib',
        'user32.lib',
        'gdi32.lib',
        'winspool.lib',
        'comdlg32.lib',
        'advapi32.lib',
        'shell32.lib',
        'ole32.lib',
        'oleaut32.lib',
        'uuid.lib',
        'odbc32.lib',
        'odbccp32.lib',
      ]

    # Optimization
    if builder.options.opt == '1':
      cxx.defines += ['NDEBUG']
      if cxx.like('gcc'):
        cxx.cflags += ['-O3']
        if cxx.like('emscripten'):
          emflags = ['--closure', '0', '--memory-init-file', '0', '-s', 'AGGRESSIVE_VARIABLE_ELIMINATION=1', '--llvm-lto', '1']
          cxx.cflags += emflags
          cxx.linkflags += ['-O3'] + emflags
      elif cxx.like('msvc'):
        cxx.cflags += ['/Ox']
        cxx.linkflags += ['/OPT:ICF', '/OPT:REF']

    # Debugging
    if builder.options.debug == '1':
      cxx.defines += ['DEBUG', '_DEBUG']
      if cxx.like('msvc'):
        cxx.cflags += ['/Od', '/RTC1']
      elif cxx.like('emscripten'):
        emflags = ['-s', 'ASSERTIONS=1', '-s', 'SAFE_HEAP=1', '-s', 'STACK_OVERFLOW_CHECK=1', '-s', 'WARN_UNALIGNED=0', '-s', 'DEMANGLE_SUPPORT=1']
        cxx.cflags += emflags
        cxx.linkflags += emflags

    # This needs to be after our optimization flags which could otherwise disable it.
    if cxx.like('msvc'):
      # Don't omit the frame pointer.
      cxx.cflags += ['/Oy-']

    # Platform-specifics
    if not cxx.like('emscripten'):
      if builder.target.platform == 'linux':
        if cxx.family == 'gcc':
          cxx.postlink += ['-static-libgcc']
        elif cxx.family == 'clang':
          cxx.postlink += ['-lgcc_eh']
        cxx.postlink += ['-lpthread', '-lrt']
      elif builder.target.platform == 'mac':
        cxx.cflags += [
          '-mmacosx-version-min=10.5',
        ]
        cxx.linkflags += [
          '-mmacosx-version-min=10.5',
        ]
      elif builder.target.platform == 'windows':
        cxx.defines += ['WIN32', '_WINDOWS']

    if builder.target.arch == 'x64':
      gccarch = '-m64'
      msvcarch = '/MACHINE:X64'
    else:
      gccarch = '-m32'
      msvcarch = '/MACHINE:X86'

    if cxx.like('msvc'):
      if msvcarch not in cxx.linkflags:    
        cxx.linkflags += [msvcarch]
    else:
      if gccarch not in cxx.cflags:
        cxx.cflags += [gccarch]
      if gccarch not in cxx.linkflags:
        cxx.linkflags += [gccarch]

    cxx.defines += ['KE_THREADSAFE']
    cxx.defines += ['SOURCEPAWN_VERSION="1.9"']

    if builder.options.amtl:
      amtl_path = builder.options.amtl
    else:
      amtl_path = os.path.join(builder.sourcePath, 'third_party', 'amtl')

    amtl_path = Normalize(amtl_path)
    if not os.path.isdir(amtl_path):
      raise Exception('Could not find AMTL at: {0}'.format(amtl_path))
    self.amtl = amtl_path

    cxx.cxxincludes += [
      os.path.join(self.amtl, 'amtl'),
      os.path.join(self.amtl),
      os.path.join(builder.sourcePath, 'include'),
    ]

  def ProgramBuilder(self, compiler, name):
    binary = compiler.Program(name)
    if binary.compiler.like('msvc'):
      binary.compiler.linkflags.append('/SUBSYSTEM:CONSOLE')
    return binary

  def LibraryBuilder(self, compiler, name):
    binary = compiler.Library(name)
    if binary.compiler.like('msvc'):
      binary.compiler.linkflags.append('/SUBSYSTEM:WINDOWS')
    return binary

  def Program(self, context, name):
    compiler = context.cxx.clone()
    return self.ProgramBuilder(compiler, name)

  def Library(self, context, name):
    compiler = context.cxx.clone()
    return self.LibraryBuilder(compiler, name)

ProjectScripts = [
  #'exp/tools/docparse/AMBuilder'
]

class SourcePawn(object):
  def __init__(self, root, amtl):
    super(SourcePawn, self).__init__()
    self.root = root
    self.amtl = amtl
    self.included_zlib = False
    self.arch = builder.target.arch
    self.spcomp_scripts = [
      os.path.join('compiler', 'AMBuilder'),
    ]
    self.vm_scripts = [
      os.path.join('vm', 'AMBuilder'),
    ]
    self.test_scripts = [
      os.path.join('tools', 'testing', 'Testing.ambuild'),
    ]
    self.exp_scripts = [
      os.path.join('exp', 'compiler', 'AMBuilder'),
      os.path.join('exp', 'tools', 'docparse', 'AMBuilder'),
    ]
    self.vars = {
      'Root': self.root,
      'SP': self,
    }

  def BuildSpcomp(self):
    self.EnsureZlib()
    builder.Build(self.spcomp_scripts, self.vars)

  def BuildVM(self):
    self.EnsureZlib()
    builder.Build(self.vm_scripts, self.vars)

  def BuildExperimental(self):
    builder.Build(self.exp_scripts, self.vars)

  def BuildTests(self):
    builder.Build(self.test_scripts, self.vars)

  def BuildSuite(self):
    self.BuildSpcomp()
    self.BuildVM()
    self.BuildExperimental()
    self.BuildTests()

  def EnsureZlib(self):
    if self.included_zlib:
      return
    zlib_dir = os.path.join('third_party', 'zlib', 'AMBuilder')
    builder.Build([zlib_dir], self.vars)
    self.included_zlib = True

if builder.parent is None:
  root = Config()
  root.configure()
  sp = SourcePawn(root, root.amtl)
  build = getattr(builder.options, 'build', 'all').split(',')
else:
  sp = SourcePawn(external_root, external_amtl)
  build = external_build

if 'all' in build:
  sp.BuildSuite()
else:
  if 'core' in build:
    build += ['spcomp', 'vm']
  if 'spcomp' in build:
    sp.BuildSpcomp()
  if 'vm' in build:
    sp.BuildVM()
  if 'exp' in build:
    sp.BuildExperimental()
  if 'test' in build:
    sp.BuildTests()

if builder.parent is not None:
  rvalue = sp
