# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os

libsourcepawn_a = None

def configure_like_shell(name, arch):
  prog = Root.Program(builder, name, arch)
  prog.compiler.includes += Includes
  prog.compiler.linkflags[0:0] = [
    libsourcepawn_a.binary,
    SP.zlib[arch],
  ]
  if prog.compiler.like('gcc'):
    prog.compiler.linkflags += ['-lstdc++']
  return prog

Includes = [
  os.path.join(SP.amtl, 'amtl'),
  os.path.join(SP.amtl),
  os.path.join(builder.currentSourcePath),
  os.path.join(builder.currentSourcePath, '..', 'third_party'),

  # The include path for SP v2 stuff.
  os.path.join(builder.sourcePath, 'sourcepawn', 'include'),
]

if builder.cxx.like('gcc'):
  builder.cxx.cflags += [
    '-Wno-invalid-offsetof',
  ]
  builder.cxx.cxxflags += ['-fno-rtti']
if builder.cxx.like('clang'):
  builder.cxx.cxxflags += [
    '-Wno-implicit-exception-spec-mismatch',
  ]
if builder.cxx.family == 'gcc':
  # ABI restrictions...
  builder.cxx.cxxflags += [
    '-Wno-delete-non-virtual-dtor',
  ]

# Build the static library.
library = Root.StaticLibrary(builder, 'sourcepawn', arch)
library.compiler.includes += Includes

library.sources += [
  'api.cpp',
  'base-context.cpp',
  'builtins.cpp',
  'code-allocator.cpp',
  'code-stubs.cpp',
  'control-flow.cpp',
  'compiled-function.cpp',
  'debugging.cpp',
  'environment.cpp',
  'file-utils.cpp',
  'graph-builder.cpp',
  'interpreter.cpp',
  'md5/md5.cpp',
  'method-info.cpp',
  'method-verifier.cpp',
  'opcodes.cpp',
  'plugin-context.cpp',
  'plugin-runtime.cpp',
  'pool-allocator.cpp',
  'runtime-helpers.cpp',
  'scripted-invoker.cpp',
  'smx-v1-image.cpp',
  'stack-frames.cpp',
  'watchdog_timer.cpp',
]

is_emscripten = builder.cxx.family == 'emscripten'
has_jit = arch in ['x86'] and not is_emscripten

if has_jit:
  library.sources += [
    'jit.cpp',
  ]
  library.compiler.defines += ['SP_HAS_JIT']

if is_emscripten:
  library.sources += [
    'code-stubs-null.cpp',
  ]
elif arch == 'x86':
  library.sources += [
    'linking.cpp',
    'x86/assembler-x86.cpp',
    'x86/code-stubs-x86.cpp',
    'x86/jit_x86.cpp',
  ]
elif arch == 'x64':
  library.sources += [
    'linking.cpp',
    'x64/assembler-x64.cpp',
    'x64/code-stubs-x64.cpp',
    'x64/macro-assembler-x64.cpp',
  ]

libsourcepawn_a = builder.Add(library)

# Build the dynamically-linked library.
dll = Root.Library(builder, 'sourcepawn.jit.x86', arch)
dll.compiler.includes += Includes
dll.compiler.linkflags[0:0] = [
  libsourcepawn_a.binary,
  SP.zlib[arch],
]
dll.sources += [
  'dll_exports.cpp'
]

libsourcepawn = builder.Add(dll)

# Build the debug shell.
shell = configure_like_shell('spshell', arch)
if has_jit:
  shell.compiler.defines += ['SP_HAS_JIT']
shell.sources += [
  'shell.cpp'
]
shell.compiler.linkflags[0:0] = [
  SP.libamtl[arch],
]
spshell = builder.Add(shell)

# Build the verifier.
verifier = configure_like_shell('verifier', arch)
verifier.sources += [
  '../tools/verifier/verifier.cpp',
]
builder.Add(verifier)

rvalue = spshell, libsourcepawn
