# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os

module = binary.Module(builder, 'vm')
module.compiler.cxxincludes += [
    os.path.join(builder.currentSourcePath),
]

if module.compiler.like('clang'):
  module.compiler.cxxflags += [
    '-Wno-implicit-exception-spec-mismatch',
  ]
if module.compiler.family == 'gcc':
  # ABI restrictions...
  module.compiler.cxxflags += [
    '-Wno-delete-non-virtual-dtor',
  ]

module.sources += [
  'api.cpp',
  'base-context.cpp',
  'builtins.cpp',
  'code-allocator.cpp',
  'code-stubs.cpp',
  'control-flow.cpp',
  'compiled-function.cpp',
  'debugging.cpp',
  'debug-metadata.cpp',
  'environment.cpp',
  'file-utils.cpp',
  'graph-builder.cpp',
  'interpreter.cpp',
  'md5/md5.cpp',
  'method-info.cpp',
  'method-verifier.cpp',
  'opcodes.cpp',
  'plugin-context.cpp',
  'plugin-runtime.cpp',
  'pool-allocator.cpp',
  'rtti.cpp',
  'runtime-helpers.cpp',
  'scripted-invoker.cpp',
  'smx-v1-image.cpp',
  'stack-frames.cpp',
  'watchdog_timer.cpp',
]

is_emscripten = module.compiler.family == 'emscripten'
has_jit = module.compiler.target.arch in ['x86'] and not is_emscripten

if has_jit:
  module.sources += [
    'jit.cpp',
    'linking.cpp',
  ]
  module.compiler.defines += ['SP_HAS_JIT']

if is_emscripten:
  module.sources += [
    'code-stubs-null.cpp',
  ]
elif module.compiler.target.arch == 'x86':
  module.sources += [
    'x86/assembler-x86.cpp',
    'x86/code-stubs-x86.cpp',
    'x86/jit_x86.cpp',
  ]
elif module.compiler.target.arch == 'x86_64':
  module.sources += [
    'x64/assembler-x64.cpp',
    'x64/code-stubs-x64.cpp',
    'x64/macro-assembler-x64.cpp',
  ]
